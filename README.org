#+TITLE: unpkg
#+LATEX: \pagebreak

* Overview

  ~unpkg~ is an adventure to discover what the world looks like if we approached
  portability from a different perspective:

  Rather than throwing out everything that isn't available everywhere, let's try
  making things run more consistently in more places.

* Why does this exist?

  Because standards like XPG, POSIX, the Single UNIX Specification exist to
  define how things *are*, not how they *should be*. ~unpkg~ is a journey to
  build a better world.

* On the shaving of yaks...

  ~unpkg~ started as a simple yak-shave. I wanted to build a cross-platform tool
  whose purpose isn't relevant to the story. I fired up a handful of systems and
  took inventory. Was there a language that was available everywhere, at a
  reasonably-consistent version? I expected this to result in some limited
  subset of some shell scripting dialect that would behave consistently, even if
  it wasn't especially nice to write. Maybe ~bash~? Versions were too
  inconsistent (ranging from 3.2.x to 4.4.x), and the plethora of options ~bash~
  could have been built with was staggering (affecting available =builtins= and
  =conditionals=, the behaviour of looping constructs like ~for~, file globbing,
  job control, and conformance to standards, among other things).

  Even if somehow, I had found a consistently-available language, there was
  still the problem of =PATH= and available commands. Take ~awk~ for instance:
  On some systems, it's the traditional ~awk~ one might expect, as was given to
  us by the elders Aho, Weinberger, and Kernighan. Elsewhere, it was Kernighan's
  ~nawk~ (New AWK), which brought us =-v= to drive away the darkness. On other
  systems, it was Mike Brennan's ~mawk~ (or Thomas Dickey's [[http://invisible-island.net/mawk/CHANGES][updated version]]),
  with its zippy bytecode interpreter. On others, it's actually GNU ~gawk~
  (Rubin, Fenlason, Stallman, Robbins), with its newfangled long-form arguments,
  and a heap of options nobody asked for or wanted, like this one:

  #+BEGIN_EXAMPLE
    -C
    --copyright

      Print the short version of the GNU copyright information message on the
      standard output and exit successfully.
  #+END_EXAMPLE

  I'll omit the history, but this extended well beyond ~awk~. The regular
  expression engine for ~grep~ varies varies by implementation, compile-time
  flags, and possibly the name it was invoked with (~egrep~ for instance, being
  a wrapper that invokes grep with =-E=). Avoiding this ambiguity is made more
  difficult, as =-F= (fixed strings) is not supported in all implementations.

  In-place modifications with ~sed~ may or may not be supported, and if they
  are, it's either =-I= or =-i=, which (sometimes) requires an argument.

  The list goes on. These aren't issues with writing portable shell scripts (a
  different problem, described in part [[http://www.etalabs.net/sh_tricks.html][here]]). These are issues with having a
  predictable set of tools available to use. To build with. To *work* with.

  Have a look at DJB's [[https://cr.yp.to/docs/unixport.html][UNIX portability notes]] for more issues.

  We have standards that make claims of portability (looking at you, POSIX), but
  largely serve to blindly document the things we're doing, even when those
  things aren't actually *good*. Once bad things are enshrined in standards
  documents, it's very challenging to fix them.

  Consider how Filesystem Hierarchy Standard [[https://refspecs.linuxfoundation.org/FHS_3.0/fhs/ch04s07.html][describes]] =/usr/libexec= (emphasis
  mine):

  #+BEGIN_QUOTE
  /usr/libexec : Binaries run by other programs (optional)

  /usr/libexec includes internal binaries that are not intended to be executed
  directly by users or shell scripts. Applications may use a single subdirectory
  under /usr/libexec.

  Applications which use /usr/libexec in this way must not also use /usr/lib to
  store internal binaries, though they may use /usr/lib for the other purposes
  documented here.

  Some previous versions of this document did not support /usr/libexec, despite
  it being standard practice in a number of environments. [26] To accomodate
  this restriction, it became common practice to use /usr/lib instead. Either
  practice is now acceptable, but *each application* must choose one way or the
  other to organize itself.
  #+END_QUOTE

  How can we rely on this? Each package must be inspected to determine which
  practice it follows (if any), and how it varies within those boundaries.

  Now, this isn't to say that all standards are fundamentally broken and have no
  redeeming qualities, but it seems clear that even on a "standards-compliant"
  system, there's no assurance of consistency.

  Let's try something different.

** Inspiration

   Since this isn't a new problem, it makes sense to draw inspiration from the
   *good* parts of current standards, packaging approaches, and systems.

   The way the various BSD and illumos distributions view the operating system
   makes more sense than the GNU/Linux approach: The OS is more than the kernel,
   it is the system as distributed. There is a clear divide between the system,
   and local packages. This allows the system to be internally consistent,
   knowing exactly what will be available and where it will be located.

   The key takeaway here is that we take responsibility for providing the tools
   we need, we can rely on them being available when we need them.

   NetBSD's =pkgsrc= gets a lot of things right. Most importantly, it proves
   that cross-platform builds are possible, and that a strong collection of
   packages can be provided across a wide array of systems. However, while any
   given package builds consistently across supported platforms, individual
   packages can be laid out mostly however they want (with mixed results).

   There's a lot to leverage there.

   DJB's [[https://cr.yp.to/slashpackage.html][slashpackage]] proposes a structure that is so close to right, but misses
   the mark in a few ways. Critically, the requirement to register a package
   name with a central authority is unreasonable, and presents a significant
   obstacle to packaging efforts. Furthermore, it shares a flaw in common with
   =pkgsrc= and the BSD =ports= tree: categories. Categories are subjective.
   Take =sudo=, for instance. Is it =security/sudo=, =admin/sudo=, or
   =sys/sudo=? With shell scripting languages, where is the line between =shell=
   and =lang=? Should it be =shell/bash= or =lang/bash=? Finally, while
   comparatively less significant, =/package/category/name-version= could be
   easier to separate into =name= and =version=.

** The Hierarchy

*** /package

   1. =/package= is a world-readable directory to hold packages.
   2. Version =V= of package =P= is installed at =/package/P/V=.
      1. If =P= provides any commands, they are installed at
         =/package/P/V/command=.
      2. If =P= provides any libraries, they are installed under
         =/package/P/V/library=.
      3. If =P= provides any headers, they are installed under
         =/package/P/V/include=.
      4. If =P= provides any manuals, they are installed under
         =/package/P/V/manual=.
      5. If =P= has any internal commands that are not indented for consumption
         by users or external scripts, they are installed under
         =/package/P/V/.command=.
   3. =/package/P/any= is a symlink to the preferred version of =P= on the
      system.
   4. Given only version =X.Y.Z= of package =P=...
      1. =/package/P/X.any= is a symbolic link to =X.Y.Z=
      2. =/package/P/X.Y.any= is a symbolic link to =X.Y.Z=

*** /command and $HOME/command

    1. =/command= is a world-readable directory containing symbolic links to
       all installed commands.
    2. =/package/*/any/command/*= should be symlinked into =/command=.
    3. The default =$PATH= is a single entry: =/command=.
       1. Individual programs may choose to extend this. For instance,
          interactive shells may prepend =$HOME/command= to =$PATH=, allowing
          user-specific commands that are not provided by the system, or
          adjustments to personal taste (such as =$HOME/command/cc= being a
          symbolic link to a user's preferred compiler).

* The Platforms

  The test platforms are currently (February 2017):

  | Family  | Distribution | Release |
  |---------+--------------+---------|
  | BSD     | DragonFly    |     4.6 |
  | BSD     | FreeBSD      |      11 |
  | BSD     | macOS        |    12.4 |
  | BSD     | NetBSD       |     7.0 |
  | BSD     | OpenBSD      |     6.0 |
  | illumos | OmniOS       | r151014 |
  | illumos | SmartOS      | support |
  | Linux   | Alpine       |     3.5 |
  | Linux   | CentOS       |       7 |
  | Linux   | Debian       |       8 |
  | Linux   | Fedora       |      25 |
  | Linux   | OpenSUSE     |    42.2 |
  | Linux   | RHEL         |       7 |
  | Linux   | SLES         |      12 |
  | Linux   | Ubuntu       |   16.04 |
  |---------+--------------+---------|

  This is intended as a representative sample for the purposes of portability.

* Requirements

  All requirements are readily available in the default repositories for all
  tested platforms. These are only required to *build* packages, not to *use*
  packages that have already been built.

** Required

   - A working copy of ~git~ in your =PATH=
   - A compiler of some sort (~clang~ or ~gcc~)
   - GNU make

** Optional (but required to build many packages)

   - GNU autoconf
   - GNU automake
   - GNU bison
   - GNU coreutils
   - GNU gettext
   - GNU libtool
   - GNU make

* Installation

** Create Initial Directories

   You'll probably need to do this as root, since normal users can't create
   directories in =/=. Commands below assume ~sudo~ as examples, but you should
   substitute the appropriate mechanism for your platform (~su~, ~doas~, etc).

   #+BEGIN_SRC shell
     sudo mkdir /package /source /command
   #+END_SRC

   Pick a user to manage packages. In this example, the current user (as
   reported by ~whoami~) is used, but if you have an =unpkg= user or something
   of the sort, substitute it here. Using root for this is probably the worst
   idea ever, since this user will be fetching and compiling arbitrary code from
   the internet.

   For ~fish~:

   #+BEGIN_SRC shell
     sudo chown -R (whoami) /package /source /command
   #+END_SRC

   For vintage shells like ~bash~:

   #+BEGIN_SRC shell
     sudo chown -R $(whoami) /package /source /command
   #+END_SRC

   Fetch the ~unpkg~ source, and place it where ~unpkg~ would:

   #+BEGIN_SRC shell
     git clone https://github.com/colstrom/unpkg.git /source/github.com/colstrom/unpkg
   #+END_SRC

   Create a link in =/package= for ~unpkg~:

   #+BEGIN_SRC shell
     ln -s /source/github.com/colstrom/unpkg /package/unpkg
   #+END_SRC

   Create a link for the ~unpkg~ command in =/command=:

   #+BEGIN_SRC shell
     ln -s /package/unpkg/command/unpkg /command/unpkg
   #+END_SRC

   Add =/command= to your path. In this example, we'll also add user-specific
   =command= directory, in case you want to do things like pretend ~bash~ is
   ~sh~, or GNU ~awk~ is actually ~awk~. Some people are into that sort of
   thing.

   For ~fish~:

   #+BEGIN_SRC shell
     echo 'set --export PATH ~/command /command $PATH' | tee -a ~/.config/fish/config.fish
   #+END_SRC

   For vintage shells like ~bash~:

   #+BEGIN_SRC shell
     echo 'export PATH=${HOME}/command:/command:${PATH}' | tee -a ${HOME}/.$(basename ${SHELL})
   #+END_SRC

* Usage

  - Run ~unpkg~ to see a list of available packages.
  - Run ~unpkg <package>~, where =<package>= is a package you want.

* License

  ~unpkg~ is available under the [[https://tldrlegal.com/license/mit-license][MIT License]]. See ~LICENSE.txt~ for the full text.

* Contributors

  - [[https://colstrom.github.io/][Chris Olstrom]] | [[mailto:chris@olstrom.com][e-mail]] | [[https://twitter.com/ChrisOlstrom][Twitter]]
