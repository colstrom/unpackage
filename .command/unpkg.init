#!/bin/sh

set -o nounset
test ${DEBUGGING:-'false'} = 'false' || set -o xtrace

UNPKG_USER=${UNPKG_USER:-'root'}

ROOT=${ROOT:-''}
PACKAGE_ROOT=${ROOT}/package
SOURCE_ROOT=${ROOT}/source
COMMAND_ROOT=${ROOT}/command

ORIGIN_PREFIX=${ORIGIN_PREFIX:-'https://'}
ORIGIN_HOST=${ORIGIN_HOST:-'github.com'}
ORIGIN_PATH=${ORIGIN_PATH:-'colstrom/unpkg'}
ORIGIN=${ORIGIN_PREFIX}${ORIGIN_HOST}/${ORIGIN_PATH}

SOURCE=${SOURCE_ROOT}/${ORIGIN_HOST}/${ORIGIN_PATH}

NAME='unpkg'
TRUNK=${TRUNK:-'develop'}
VERSION=${VERSION:-${TRUNK}}
TAG=${TAG:-${VERSION}}

PATH=${COMMAND_ROOT}:${PACKAGE_ROOT}/git:${PACKAGE_ROOT}/gnu-make/command:${PACKAGE_ROOT}/gcc/command:${PATH}
export PATH

GIT=${GIT:-$(command -v git)}
SU=${SU:-$(command -v su)}

_abort() {
    exit ${1:-111}
}

_error_git_not_found() {
    cat <<-EOF >&2
error: git not found

${NAME} uses git to manage the source code of packages. Please provide a working
copy in PATH or set the GIT environment variable to a compatible alternative.

EOF
    _abort
}

_error_su_not_found() {
    cat <<-EOF >&2
error: su not found

Wait, what? There's no "su" in your PATH. That's... interesting.

If you're using "sudo" to run this tool as ${UNPKG_USER}, you should check your
configuration and see if it's discarding your PATH.

EOF
    _abort
}

_error_user_not_found() {
    cat <<-EOF >&2
error: user not found

UNPKG_USER is set to "${UNPKG_USER}", but that user does not exist. Please
create this user before installing ${NAME}.

EOF
    _abort
}

_warning_wtf_are_you_doing() {
    if test ${UNPKG_ITS_OK_IM_FROM_THE_INTERNET:-'false'} = 'false'
    then
        cat <<-EOF >&2
warning: UNPKG_USER is set to "root"

You should create a non-privileged user and set UNPKG_USER to the name of that
user. This user will be used to build packages from source code. Doing this as
root is literally choosing to run arbitrary code from the internet without any
limitations on what that code can do.

This is a terrible idea. Please don't do this.

If you understand the risks, and still want to do it for some reason, you can
set UNPKG_LET_ME_RUN_ARBITRARY_CODE_FROM_THE_INTERNET_AS_ROOT to a non-false
value.

You can suppress this warning by setting UNPKG_ITS_OK_IM_FROM_THE_INTERNET to a
non-false value.

EOF
    fi
}

_success() {
    cat <<-EOF>&2
success

unpkg is initialized. You should add ${COMMAND_ROOT} to your path.

UNPKG_USER was set to "${UNPKG_USER}", so everything is owned by that user, and
all packaging operations are expected to be performed by that user. If this is
not what you want, set UNPKG_USER to something else, and run this tool again.

EOF
    exit
}

_failure() {
    cat <<-EOF>&2
failure

something went wrong. It would be nice to tell you more than that, but if we're
in this function, we've passed all the spots where errors would be handled
better. Sorry?

If you set DEBUGGING to a non-false value and run this again, you might get some
insight into what went wrong. If that doesn't help, post the DEBUGGING output to
an issue here:

   https://github.com/${ORIGIN_PATH}/issues/new

EOF
    _abort 200
}

_is_offline() {
    test ${OFFLINE:-'false'} != 'false'
}

_is_online() {
    ! _is_offline
}

_as_unpkg_user() {
    if test ${#} -gt 0
    then
        if test "$(whoami)" = ${UNPKG_USER}
        then
           eval "${*}"
        else
            test -n "${SU}" || _error_su_not_found
            su ${UNPKG_USER} -c "${*}"
        fi
    fi
}

_git() {
    test ${#} = 0 || _as_unpkg_user ${GIT} ${@}
}

_setup_filesystem() {
    for directory in ${SOURCE_ROOT} ${PACKAGE_ROOT} ${COMMAND_ROOT}
    do
        mkdir -p ${directory} || exit 111
        chown -R ${UNPKG_USER} ${directory} || exit 111
    done
}

_clean() {
    if test -d ${SOURCE}
    then
        cd ${SOURCE} || exit 111
        _git reset --hard
        _git clean -d --force
    else
        true
    fi
}

_sync() {
    if test -d ${SOURCE}
    then
        if _is_online
        then
            _git checkout ${TRUNK} && _git pull
        fi
        _git checkout ${TAG}
    else
        _git clone ${ORIGIN} ${SOURCE} && cd ${SOURCE} && _git checkout ${TAG}
    fi
}

_link() {
    _as_unpkg_user ln -sf ${SOURCE} ${PACKAGE_ROOT}/${NAME}
    _as_unpkg_user ln -sf ${PACKAGE_ROOT}/${NAME}/command/* ${COMMAND_ROOT}/
}

if test "${UNPKG_USER}" = root
then
    _warning_wtf_are_you_doing
    if test ${UNPKG_LET_ME_RUN_ARBITRARY_CODE_FROM_THE_INTERNET_AS_ROOT:-'false'} = 'false'
    then
       _abort 100
    fi
fi

test -n "${GIT}" || _error_git_not_found
id "${UNPKG_USER}" >/dev/null 2>/dev/null || _error_user_not_found

if _setup_filesystem && _clean && _sync && _link
then
    _success
else
    _failure
fi
